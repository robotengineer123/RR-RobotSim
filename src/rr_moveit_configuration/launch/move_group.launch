<launch>

  <include file="$(find rr_moveit_configuration)/launch/planning_context.launch" />

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
	   value="gdb -x $(find rr_moveit_configuration)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>
  <arg name="moveit_controllers" default="$(find rr_moveit_configuration)/config/controllers.yaml"/>

  <arg name="capabilities" default=""/>
  <arg name="disable_capabilities" default=""/>
  <arg name="pipeline" default="ompl"/>

  <!-- Planning Pipelines -->
  <group ns="move_group/planning_pipelines">

    <!-- OMPL -->
    <include ns="ompl" file="$(dirname)/planning_pipeline.launch.xml">
      <arg name="pipeline" value="ompl" />
    </include>

    <!-- Chomp -->
    <include ns="chomp" file="$(dirname)/planning_pipeline.launch.xml">
      <arg name="pipeline" value="chomp" />
    </include>

    <!-- Stomp -->
    <include ns="stomp" file="$(dirname)/planning_pipeline.launch.xml">
      <arg name="pipeline" value="stomp" />
    </include>

    <!-- Pilz Industrial Motion -->
    <include ns="pilz_industrial_motion_planner" file="$(dirname)/planning_pipeline.launch.xml">
      <arg name="pipeline" value="pilz_industrial_motion_planner" />
    </include>

    <!-- Ompl Stomp -->
    <include ns="ompl_stomp" file="$(dirname)/planning_pipeline.launch.xml">
      <arg name="pipeline" value="ompl-stomp" />
    </include>

    <!-- Ompl Chomp -->
    <include ns="ompl_chomp" file="$(dirname)/planning_pipeline.launch.xml">
      <arg name="pipeline" value="ompl-chomp" />
    </include>

  </group>

  <!-- Trajectory Execution Functionality -->
  <include ns="move_group" file="$(find rr_moveit_configuration)/launch/trajectory_execution.launch.xml"
           if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="rr_robot" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
    <arg name="moveit_controllers" value="$(arg moveit_controllers)" />
  </include>

  <!-- Sensors Functionality -->
  <include ns="move_group" file="$(find rr_moveit_configuration)/launch/sensor_manager.launch.xml"
           if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="rr_robot" />
  </include>

  <!-- Start the actual move_group node/action server -->
  <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group"
        type="move_group" respawn="false" output="screen" args="$(arg command_args)">

    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />
    <param name="capabilities" value="$(arg capabilities)"/>
    <param name="disable_capabilities" value="$(arg disable_capabilities)"/>
    <param name="default_planning_pipeline" value="$(arg pipeline)" />

    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>

</launch>
